<!-- Views/template-manager/index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{title}} - Template Manager</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/theme/monokai.min.css" rel="stylesheet">
</head>
<body class="bg-gray-100">
    <div class="flex h-screen">
        <!-- Sidebar -->
        {{include 'template-manager/_sidebar.html'}}
        
        <!-- Main Content -->
        <div class="flex-1 flex flex-col overflow-hidden">
            <!-- Top Navigation -->
            <header class="bg-white shadow">
                <div class="px-4 py-3 flex justify-between items-center">
                    <h1 class="text-2xl font-semibold text-gray-900">Template Manager</h1>
                    <div class="flex space-x-4">
                        <button id="saveTemplate" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
                            Save Changes
                        </button>
                        <button id="previewTemplate" class="bg-gray-600 text-white px-4 py-2 rounded hover:bg-gray-700">
                            Preview
                        </button>
                    </div>
                </div>
            </header>

            <!-- Editor Area -->
            <main class="flex-1 overflow-y-auto bg-white p-4">
                <div class="grid grid-cols-2 gap-4 h-full">
                    <!-- Code Editor -->
                    <div class="border rounded-lg shadow-sm">
                        <div class="bg-gray-100 px-4 py-2 border-b">
                            <h3 class="font-medium">Template Code</h3>
                        </div>
                        <textarea id="codeEditor" class="w-full h-[calc(100%-40px)]"></textarea>
                    </div>

                    <!-- Variables Panel -->
                    <div class="border rounded-lg shadow-sm">
                        <div class="bg-gray-100 px-4 py-2 border-b">
                            <h3 class="font-medium">Template Variables</h3>
                        </div>
                        <div class="p-4">
                            <div id="variablesList" class="space-y-4">
                                <!-- Variables will be dynamically inserted here -->
                            </div>
                            <button id="addVariable" class="mt-4 text-blue-600 hover:text-blue-700">
                                + Add Variable
                            </button>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <!-- Preview Modal -->
    <div id="previewModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
        <div class="bg-white w-3/4 h-3/4 rounded-lg shadow-lg flex flex-col">
            <div class="px-4 py-3 border-b flex justify-between items-center">
                <h3 class="text-lg font-medium">Template Preview</h3>
                <button id="closePreview" class="text-gray-500 hover:text-gray-700">&times;</button>
            </div>
            <div id="previewContent" class="flex-1 overflow-auto p-4">
                <!-- Preview content will be inserted here -->
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/xml/xml.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/htmlmixed/htmlmixed.min.js"></script>
    <script>
        // Initialize CodeMirror
        const editor = CodeMirror.fromTextArea(document.getElementById("codeEditor"), {
            mode: "htmlmixed",
            theme: "monokai",
            lineNumbers: true,
            autoCloseTags: true,
            autoCloseBrackets: true,
            matchBrackets: true,
            indentUnit: 4,
            lineWrapping: true
        });

        // Initialize template manager
        class TemplateManager {
            constructor() {
                this.currentTemplate = null;
                this.variables = new Map();
                this.setupEventListeners();
            }

            setupEventListeners() {
                document.getElementById('saveTemplate').addEventListener('click', () => this.saveTemplate());
                document.getElementById('previewTemplate').addEventListener('click', () => this.showPreview());
                document.getElementById('closePreview').addEventListener('click', () => this.hidePreview());
                document.getElementById('addVariable').addEventListener('click', () => this.addVariable());
            }

            async loadTemplate(id) {
                try {
                    const response = await fetch(`/templates/${id}`);
                    const template = await response.json();
                    this.currentTemplate = template;
                    editor.setValue(template.content);
                    this.loadVariables(template.variables);
                } catch (error) {
                    console.error('Error loading template:', error);
                }
            }

            async saveTemplate() {
                if (!this.currentTemplate) return;

                const templateData = {
                    content: editor.getValue(),
                    variables: Array.from(this.variables.values())
                };

                try {
                    const response = await fetch(`/templates/${this.currentTemplate.id}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(templateData)
                    });

                    if (response.ok) {
                        this.showNotification('Template saved successfully');
                    } else {
                        throw new Error('Failed to save template');
                    }
                } catch (error) {
                    console.error('Error saving template:', error);
                    this.showNotification('Error saving template', 'error');
                }
            }

            showPreview() {
                const modal = document.getElementById('previewModal');
                const content = document.getElementById('previewContent');
                content.innerHTML = editor.getValue();
                modal.classList.remove('hidden');
            }

            hidePreview() {
                document.getElementById('previewModal').classList.add('hidden');
            }

            addVariable() {
                const variablesList = document.getElementById('variablesList');
                const varId = `var_${Date.now()}`;
                
                const varElement = document.createElement('div');
                varElement.className = 'flex items-center space-x-2';
                varElement.innerHTML = `
                    <input type="text" placeholder="Variable name" class="flex-1 border rounded px-2 py-1">
                    <input type="text" placeholder="Default value" class="flex-1 border rounded px-2 py-1">
                    <select class="border rounded px-2 py-1">
                        <option value="string">String</option>
                        <option value="number">Number</option>
                        <option value="boolean">Boolean</option>
                    </select>
                    <button class="text-red-600 hover:text-red-700">Ã—</button>
                `;
                
                variablesList.appendChild(varElement);
            }

            showNotification(message, type = 'success') {
                // Implementation of notification system
                alert(message);
            }
        }

        // Initialize the template manager
        const templateManager = new TemplateManager();

        // Load initial template if ID is provided in URL
        const urlParams = new URLSearchParams(window.location.search);
        const templateId = urlParams.get('id');
        if (templateId) {
            templateManager.loadTemplate(templateId);
        }
    </script>
</body>
</html>