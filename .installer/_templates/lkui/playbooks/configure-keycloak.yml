---
- name: Configure Keycloak Realm and Client
  hosts: localhost
  gather_facts: no
  vars:
    keycloak_admin_user: admin
    keycloak_admin_password: "{{ lookup('env', 'KEYCLOAK_ADMIN_PASSWORD') | default('admin') }}"
    redirect_uris:
      - "http://localhost:{{ app_port }}/auth/callback"
      - "http://localhost:{{ app_port }}/*"
  
  tasks:
    - name: Wait for Keycloak to be ready
      uri:
        url: "{{ keycloak_url }}/health/ready"
        method: GET
        status_code: 200
      register: result
      until: result.status == 200
      retries: 30
      delay: 10

    - name: Get admin token
      uri:
        url: "{{ keycloak_url }}/realms/master/protocol/openid-connect/token"
        method: POST
        body_format: form-urlencoded
        body:
          client_id: admin-cli
          username: "{{ keycloak_admin_user }}"
          password: "{{ keycloak_admin_password }}"
          grant_type: password
        validate_certs: no
      register: admin_token

    - name: Create realm
      uri:
        url: "{{ keycloak_url }}/admin/realms"
        method: POST
        headers:
          Authorization: "Bearer {{ admin_token.json.access_token }}"
          Content-Type: application/json
        body_format: json
        body:
          realm: "{{ realm_name }}"
          enabled: true
          registrationAllowed: true
          registrationEmailAsUsername: false
          rememberMe: true
          loginTheme: keycloak
          sslRequired: external
        status_code: [201, 409]
        validate_certs: no

    - name: Create client
      uri:
        url: "{{ keycloak_url }}/admin/realms/{{ realm_name }}/clients"
        method: POST
        headers:
          Authorization: "Bearer {{ admin_token.json.access_token }}"
          Content-Type: application/json
        body_format: json
        body:
          clientId: "{{ client_id }}"
          name: "{{ app_name }} Application"
          description: "OAuth2 client for {{ app_name }}"
          rootUrl: "http://localhost:{{ app_port }}"
          adminUrl: "http://localhost:{{ app_port }}"
          baseUrl: "/"
          enabled: true
          clientAuthenticatorType: client-secret
          secret: "{{ client_secret }}"
          redirectUris: "{{ redirect_uris }}"
          webOrigins:
            - "http://localhost:{{ app_port }}"
            - "+"
          publicClient: false
          protocol: openid-connect
          attributes:
            saml.assertion.signature: "false"
            saml.multivalued.roles: "false"
            saml.force.post.binding: "false"
            saml.encrypt: "false"
            backchannel.logout.revoke.offline.tokens: "false"
            saml.server.signature: "false"
            saml.server.signature.keyinfo.ext: "false"
            exclude.session.state.from.auth.response: "false"
            backchannel.logout.session.required: "true"
            client_credentials.use_refresh_token: "false"
            saml_force_name_id_format: "false"
            saml.client.signature: "false"
            tls.client.certificate.bound.access.tokens: "false"
            saml.authnstatement: "false"
            display.on.consent.screen: "false"
            saml.onetimeuse.condition: "false"
          directAccessGrantsEnabled: true
          standardFlowEnabled: true
          implicitFlowEnabled: false
          serviceAccountsEnabled: false
        status_code: [201, 409]
        validate_certs: no

    - name: Update application configuration
      uri:
        url: "{{ callback_url }}"
        method: POST
        headers:
          Content-Type: application/json
        body_format: json
        body:
          status: "success"
          message: "Keycloak configured successfully"
          realm: "{{ realm_name }}"
          client_id: "{{ client_id }}"
          auth_url: "{{ keycloak_url }}"
        status_code: [200, 201, 404]
        validate_certs: no
      ignore_errors: yes

    - name: Create demo user (optional)
      uri:
        url: "{{ keycloak_url }}/admin/realms/{{ realm_name }}/users"
        method: POST
        headers:
          Authorization: "Bearer {{ admin_token.json.access_token }}"
          Content-Type: application/json
        body_format: json
        body:
          username: demo
          email: demo@example.com
          firstName: Demo
          lastName: User
          enabled: true
          emailVerified: true
          credentials:
            - type: password
              value: demo123
              temporary: false
        status_code: [201, 409]
        validate_certs: no
      when: create_demo_user | default(true) | bool