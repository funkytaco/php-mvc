<?php

/**
 * IDE Helper for Nimbus Framework
 * 
 * This file provides IDE type hints for dynamic resolutions and framework patterns
 * DO NOT include this file in production - it's for IDE support only
 * 
 * @author Generated by Nimbus Framework
 * @license Apache-2.0
 * @copyright 2025 SmallCloud, LLC
 */

namespace {
    /**
     * Global named_vars array for request data
     * Used by the framework for passing request data between components
     * 
     * @var array<string, mixed> $GLOBALS['named_vars']
     */
    $GLOBALS['named_vars'] = [];
}

namespace Auryn {
    /**
     * Enhanced type hints for Auryn Injector
     */
    class Injector {
        /**
         * Make an instance with proper type hints
         * 
         * @template T
         * @param class-string<T> $name
         * @return T
         */
        public function make(string $name) {}
        
        /**
         * Share an instance with type support
         * 
         * @param class-string $name
         * @return self
         */
        public function share(string $name): self {}
        
        /**
         * Define constructor parameters
         * 
         * @param class-string $name
         * @param array<string, mixed> $args
         * @return self
         */
        public function define(string $name, array $args): self {}
    }
}

namespace Main\Renderer {
    /**
     * Enhanced Renderer interface with specific implementations
     */
    interface Renderer {
        /**
         * @param string $template
         * @param array<string, mixed> $data
         * @return string
         */
        public function render(string $template, array $data = []): string;
    }
    
    class MustacheRenderer implements Renderer {
        public function render(string $template, array $data = []): string {}
    }
}

namespace App\Controllers {
    /**
     * Generated controller type hints
     */
    class IndexController extends \Nimbus\Controller\AbstractController {
        public function index(): void {}
        public function apiList(): void {}
        public function apiGet(int|string $id): void {}
        public function apiCreate(): void {}
        public function apiUpdate(int|string $id): void {}
        public function apiDelete(int|string $id): void {}
        public function edaWebhook(): void {}
    }
}

namespace App\Models {
    /**
     * Generated model type hints
     */
    class DemoModel {
        public function __construct(\PDO $db) {}
        
        /**
         * @return array<string, int|string>
         */
        public function getStats(): array {}
        
        /**
         * @return array<int, array<string, mixed>>
         */
        public function getAllItems(): array {}
        
        /**
         * @return array<string, mixed>|null
         */
        public function getItem(int $id): ?array {}
        
        /**
         * @param array<string, mixed> $data
         */
        public function createItem(array $data): int {}
        
        /**
         * @param array<string, mixed> $data
         */
        public function updateItem(int $id, array $data): bool {}
        
        public function deleteItem(int $id): bool {}
    }
}

/**
 * FastRoute type hints for better IDE support
 */
namespace FastRoute {
    class RouteCollector {
        /**
         * @param string $httpMethod
         * @param string $route
         * @param callable|array{0: class-string, 1: string} $handler
         */
        public function addRoute(string $httpMethod, string $route, $handler): void {}
        
        public function get(string $route, $handler): void {}
        public function post(string $route, $handler): void {}
        public function put(string $route, $handler): void {}
        public function delete(string $route, $handler): void {}
        public function patch(string $route, $handler): void {}
    }
    
    class Dispatcher {
        const NOT_FOUND = 0;
        const METHOD_NOT_ALLOWED = 1;
        const FOUND = 2;
        
        /**
         * @return array{0: int, 1?: array{0: class-string, 1: string}, 2?: array<string, string>}
         */
        public function dispatch(string $httpMethod, string $uri): array {}
    }
    
    /**
     * @param callable(\FastRoute\RouteCollector): void $routeDefinitionCallback
     * @return \FastRoute\Dispatcher
     */
    function simpleDispatcher(callable $routeDefinitionCallback): Dispatcher {}
}