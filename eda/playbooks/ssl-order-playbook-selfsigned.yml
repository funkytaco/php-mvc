---
- name: Order a self-signed SSL certificate
  hosts: localhost
  gather_facts: no

  vars:
    domain: ""
    email: ""
    order_id: ""

  tasks:
    - name: Get order details
      ansible.builtin.uri:
        url: "http://testgenerated-app:8080/lkui/api/orders/"
        method: GET
        headers:
          Content-Type: "application/json"
      register: order_response

    - name: Get host details with private key
      ansible.builtin.uri:
        url: "http://testgenerated-app:8080/lkui/api/hosts/"
        method: GET
        headers:
          Content-Type: "application/json"
      register: host_response

    - name: Create temporary directory for certificate generation
      ansible.builtin.tempfile:
        state: directory
        suffix: selfsigned
      register: temp_dir

    - name: Write private key to temporary file
      ansible.builtin.copy:
        content: ""
        dest: "/private.key"
        mode: '0600'
      register: private_key_result

    - name: Generate self-signed certificate using existing private key
      ansible.builtin.command:
        cmd: >
          openssl req -new -x509 -key /private.key
          -out /certificate.crt -days 365
          -subj "/CN=/emailAddress="
      register: cert_result
      when: private_key_result is succeeded

    - name: Read certificate content
      ansible.builtin.slurp:
        src: "/certificate.crt"
      register: cert_content
      when: cert_result is succeeded

    - name: Create certbot live directory for domain for expiry monitoring
      ansible.builtin.file:
        path: "/etc/letsencrypt/live/"
        state: directory
        mode: '0755'
      when: cert_result is succeeded

    - name: Copy certificate to certbot live directory for expiry monitoring
      ansible.builtin.copy:
        src: "/certificate.crt"
        dest: "/etc/letsencrypt/live//cert.pem"
        mode: '0644'
      when: cert_result is succeeded

    - name: Copy private key to certbot live directory for expiry monitoring
      ansible.builtin.copy:
        src: "/private.key"
        dest: "/etc/letsencrypt/live//privkey.pem"
        mode: '0600'
      when: cert_result is succeeded

    - name: Clean up temporary directory
      ansible.builtin.file:
        path: ""
        state: absent
      when: temp_dir.path is defined

    - name: Clean up any loose key files in letsencrypt directory
      ansible.builtin.file:
        path: "/etc/letsencrypt/.key"
        state: absent
      when: cert_result is succeeded

    - name: Post certificate to order endpoint
      ansible.builtin.uri:
        url: "http://testgenerated-app:8080/lkui/api/orders//certificate"
        method: POST
        headers:
          Content-Type: "application/json"
        body_format: json
        body:
          cert_content: ""
      when: cert_result is succeeded and cert_content is defined

    - name: Post success to order endpoint
      ansible.builtin.uri:
        url: "http://testgenerated-app:8080/lkui/api/orders/"
        method: POST
        headers:
          Content-Type: "application/json"
        body_format: json
        body:
          status: "ORDER_COMPLETED"
          order_id: ""
          error_message: "Self-signed certificate generated successfully"
      when: cert_result is succeeded and cert_content is defined

    - name: Post failure to order endpoint
      ansible.builtin.uri:
        url: "http://testgenerated-app:8080/lkui/api/orders/"
        method: POST
        headers:
          Content-Type: "application/json"
        body_format: json
        body:
          status: "ORDER_FAILED"
          error_message: ""
      when: private_key_result is failed or cert_result is failed